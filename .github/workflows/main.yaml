name: Django Buildpack Container

# Firstly, we have defined the event that triggers this workflow.
on:
    push:
        branches: [main] # Here we have defined that this workflow will be triggered only when the code is pushed to the main branch.
        paths:
            - 'src/**' # Condition to trigger the workflow only when the code in the src directory is pushed.
    pull_request:
        branches: [main] # Activate the workflow only when a pull request is made to the main branch.
        paths:
            - 'src/**'
    workflow_dispatch: # This event allows us to manually trigger the workflow.

# Here, we have defined the job named 'build-and-push'.
jobs:
    build-and-push:
        runs-on: ubuntu-latest

        # Defined the Environment variables.
        env:
          BASE_DIR: $ {{ secrets.BASE_DIR || 'src/'}} # This is the base directory of the auto-django project.
          BUILDPACK_BUILDER: $ {{ secrets.BUILDPACK_BUILDER || 'gcr.io/buildpacks/builder'}} # This is the buildpack builder image.
          DOCKER_HUB_IMAGE_TAG: $ {{ secrets.DOCKER_HUB_IMAGE_TAG ||  github.sha}} # This is the tag for the docker image.
          DOCKER_HUB_REPO: $ {{secrets.DOCKER_HUB_REPO || github.repository }} # This is the docker repository.

        steps:
        # Checkout the code from the repository.
        - uses: actions/checkout@v4

        # Setup the Python Environment.
        - name: Setting up Python
          uses: actions/setup-python@v2
          with:
            python-version: '3.10.12' # This is the specific version of Python that we are using.

        # Install dependencies.
        - name: Install Dependencies
          run: |
            python -m pip install --upgrade pip 
            pip install toml

        # Here, we will load the TOML Configuration and set environment variables.
        - name: Load TOML Configuration and set environment variables.
          run: |
            python -c "
            import toml
            from pathlib import Path
            import os

            def load_config():
                config_path = Path('${{github.workspace}}/src/home/project.toml')
                return toml.load(config_path)

            config = load_config()

            with open(os.environ['GITHUB_ENV'], 'a') as github_env:
                for env in config['build.env']:
                    github_env.write(f'{env['name']}={env['value']}\n')
            "

        # Setup Pack CLI for building the app using buildpacks.
        - name: Setup Pack CLI
          uses: buildpacks/github-actions/setup-pack@v5.0.0

        # Build the application using buildpacks
        - name: Build app using Buildpacks
          run: |
           pack build ${{env.DOCKER_HUB_REPO}}:${{ env.DOCKER_HUB_IMAGE_TAG }} \
            --path ${{env.BASE_DIR}} \
            --env "DISABLE_COLLECTSTATIC=${{env.DISABLE_COLLECTSTATIC}}" \
            --env "GOOGLE_RUNTIME_VERSION=${{env.GOOGLE_RUNTIME_VERSION}}" \
            --builder ${{env.BUILDPACK_BUILDER}}

        # Login to Docker Hub
        - name: Login to Docker Hub
          id: docker_login
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_HUB_USERNAME }}  # Docker Hub username from secrets
            password: ${{ secrets.DOCKER_HUB_TOKEN }}  # Docker Hub token from secrets

        # Check Docker login Status
        - name: Check Docker Login Status
          if: steps.docker_login.outcome == 'failed'
          run: |
            echo "Docker login failed"
            exit 1

        # Tag the Docker container with 'latest' and the specific version tag.
        - name: Tag the container as latest as well specific version
          run: |
            docker tag ${{env.DOCKER_HUB_REPO}}:${{ env.DOCKER_HUB_IMAGE_TAG }} ${{env.DOCKER_HUB_REPO}}:latest

        # Push the Docker container to Docker Hub.
        - name: Push the specific version  and latest tag to Docker Hub
          run: docker push ${{env.DOCKER_HUB_REPO}} --all-tags